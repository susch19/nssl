name: Draft Github Release
on:
  workflow_dispatch:
    # Enable manual run
  pull_request:
    branches: [ "master", "develop" ]

jobs:
  create-build:
    name: Create ${{ matrix.target }} build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        target: [Android, PlayStore, Windows, Linux] 
        include:
        - os: windows-latest
          target: Windows
          build_target: windows
          build_path: build\windows\x64\runner\Release
          asset_extension: .zip
          asset_content_type: application/zip
        - os: ubuntu-latest
          target: Linux
          build_target: linux
          build_path: build/linux/x64/release/bundle
          asset_extension: .tar.gz
          asset_content_type: application/gzip
        - os: ubuntu-latest
          target: Android
          build_target: apk
          build_path: build/app/outputs/flutter-apk
          asset_extension: .apk
          asset_content_type: application/vnd.android.package-archive
        - os: ubuntu-latest
          target: PlayStore
          build_target: aab
          build_path: build/app/outputs/flutter-aab
          asset_extension: .aab
          asset_content_type: application/x-authorware-bin
      # Disable fail-fast as we want results from all even if one fails.
      fail-fast: false
    steps:
    # Set up Flutter.
    - name: Clone Flutter repository with master channel
      uses: subosito/flutter-action@v2
      with:
        channel: master

    - name: Install Linux dependencies
      if: matrix.target == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libx11-dev pkg-config cmake ninja-build libblkid-dev
    - name: Install Android dependencies
      if: matrix.target == 'Android' || matrix.target == 'PlayStore'
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
    - name: Enable desktop support
      if: matrix.target != 'Android' && matrix.target != 'PlayStore'
      run: |
        flutter config --enable-linux-desktop
        flutter config --enable-macos-desktop
        flutter config --enable-windows-desktop
    - run: flutter doctor -v


    # Checkout NSSL code, recreate missing files, and get packages.
    - name: Checkout NSSL code
      uses: actions/checkout@v4
    - run: flutter create . --project-name nssl --org de.susch19
    - run: flutter pub get
    - name: Configure Keystore for Android
      if: matrix.target == 'Android' || matrix.target == 'PlayStore'
      run: |
        echo "$KEY_STORE_FILE" | base64 --decode > app/nssl-keystore.jks
        echo "storeFile=nssl-keystore.jks" >> key.properties
        echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
        echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
        echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
      env:
        KEY_STORE_FILE: ${{ secrets.KEY_STORE_FILE }}
        KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
        KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
        KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
      working-directory: android
        
    - name: Create License File Powershell
      if: matrix.target == 'Windows'
      run: |
        [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("$Env:SCANDIT_LICENSE_FILE")) > .license.dart
      working-directory: lib
      env:
        SCANDIT_LICENSE_FILE: ${{ secrets.SCANDIT_LICENSE_FILE }}
      
    - name: Create License File Bash
      if: matrix.target != 'Windows'
      run: |
        echo "$SCANDIT_LICENSE_FILE" | base64 --decode > .license.dart
      working-directory: lib
      env:
        SCANDIT_LICENSE_FILE: ${{ secrets.SCANDIT_LICENSE_FILE }}
        
    - name: Create Google Services Json File Bash
      if: matrix.target != 'Windows'
      run: |
        echo "$GOOGLE_SERVICES_JSON" | base64 --decode > google-services.json
      working-directory: android/app
      env:
        GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        
        
    # Build the application
    - name: Build Flutter Application
      run: flutter build -v ${{ matrix.build_target }} --release
      
    - name: Copy SQLite3 Dependency
      if: matrix.target == 'Windows'
      run: cp .\windows\libs\* ${{ matrix.build_path }}

    # Package the build.
    - name: Copy VC redistributables to release directory for Windows
      if: matrix.target == 'Windows'
      run: |
        Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\msvcp140.dll') .
        Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\vcruntime140.dll') .
        Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\vcruntime140_1.dll') .
    - name: Rename build for ${{ matrix.target }}
      if: matrix.target == 'Android' || matrix.target == 'PlayStore'
      run: mv app-release.${{ matrix.asset_extension }} $GITHUB_WORKSPACE/nssl_${{ matrix.target }}${{ matrix.asset_extension }}
      working-directory: ${{ matrix.build_path }}
    - name: Compress build for Linux
      if: matrix.target == 'Linux'
      run: tar czf $GITHUB_WORKSPACE/nssl_${{ matrix.target }}${{ matrix.asset_extension }} *
      working-directory: ${{ matrix.build_path }}
    - name: Compress build for Windows
      if: matrix.target == 'Windows'
      run: compress-archive -Path * -DestinationPath ${env:GITHUB_WORKSPACE}\nssl_${{ matrix.target }}${{ matrix.asset_extension }}
      working-directory: ${{ matrix.build_path }}

    # Upload the build.
    - name: Add build into artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nssl_${{ matrix.target }}${{ matrix.asset_extension }}
        path: ./nssl_${{ matrix.target }}${{ matrix.asset_extension }}
